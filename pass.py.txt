import secrets
import string
import argparse

def generate_password(length=12):
    if length < 4:
        raise ValueError("Password length must be at least 4 characters")
    
    # Define character sets
    lowercase = string.ascii_lowercase
    uppercase = string.ascii_uppercase
    digits = string.digits
    symbols = string.punctuation

    #Combine all characters
    all_chars = lowercase + uppercase + digits + symbols

    # Ensure at least one character from each set
    password_chars = [
        secrets.choice(lowercase),
        secrets.choice(uppercase),
        secrets.choice(digits),
        secrets.choice(symbols),
    ]

    # Add remaining characters
    remaining_length = length - 4
    password_chars += [secrets.choice(all_chars) for _ in range(remaining_length)]

    # Shuffle to avoid predictable patterns
    secrets.SystemRandom().shuffle(password_chars)

    return ''.join(password_chars)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Generate a secure password.')
    parser.add_argument('--length', type=int, default=12, 
                       help='Length of the password (minimum 4, default: 12)')
    args = parser.parse_args()

    try:
        print(f"Generated password: {generate_password(args.length)}")
    except ValueError as e:
        print(f"Error: {e}")